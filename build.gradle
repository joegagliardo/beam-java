// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// https://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.


plugins {
    id 'application'
}

repositories {
    mavenCentral()
    maven {
        url = uri("https://packages.confluent.io/maven/")
    }
}

application {
//    mainClass = 'com.example.App'
    mainClass = project.hasProperty("mainClass") ? project.getProperty("mainClass") : "App"
}

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(11))
  }
}

test {
    // JUnit 4.
    useJUnit()
}

ext {
    apacheBeamVersion = '2.59.0'

    project_id = 'joey-gagliardo'
    region = 'us-central1'
    bucket = 'gs://joey-dataflow-bucket'
} 

// task dataflow(type:JavaExec) {
//     mainClass = "$mainClass"
//     classpath = sourceSets.main.runtimeClasspath

//     args = [
//         "--runner=DataflowRunner",
//         "--project=$project_id",
//         "--region=$region",
//         "--gcpTempLocation=${bucket}/temp"
//     ]
// }

dependencies {
    implementation "org.apache.beam:beam-sdks-java-core:$apacheBeamVersion"
    implementation "org.apache.beam:beam-runners-google-cloud-dataflow-java:$apacheBeamVersion"
    implementation 'org.apache.avro:avro:1.9.2'

    runtimeOnly "org.apache.beam:beam-runners-direct-java:$apacheBeamVersion"
    runtimeOnly "org.slf4j:slf4j-api:2.+"
    runtimeOnly "org.slf4j:slf4j-jdk14:2.+"
    testImplementation "junit:junit:4.13.2"
    testImplementation 'org.hamcrest:hamcrest:2.2'
}

// Package a self-contained jar file.

jar {
    archiveBaseName = 'pipeline'
    destinationDirectory = file('build')
    manifest {
        attributes 'Main-Class': 'com.example.App'
    }
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

compileJava {
  options.incremental = false
    }

}
